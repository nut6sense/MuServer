package services

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"maxion-zone4/models"
	"time"
)

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Monster ‡πÄ‡∏î‡∏¥‡∏ô, ‡πÑ‡∏•‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô, ‡πÇ‡∏à‡∏°‡∏ï‡∏µ, ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Packet
func StartMonsterAI() {
	ticker := time.NewTicker(500 * time.Millisecond)
	go func() {
		for range ticker.C {
			for zoneID, monsters := range MonsterManager.monsters {
				tileMap := TileMapData[zoneID]
				players := GetPlayersInZone(zoneID) // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

				for _, m := range monsters {
					if !m.Alive {
						continue
					}

					template := MonsterTemplates[m.Index]
					if template == nil {
						continue // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ template ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
					}

					nearest := findNearestPlayer(m, players)
					if nearest != nil {
						// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô Player ‡πÑ‡∏´‡∏°
						if distance(m.Pos, nearest.Pos) <= template.ViewRange {
							m.Target = nearest.Pos

							// ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô AttackRange ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô
							if distance(m.Pos, nearest.Pos) <= template.AttackRange {
								simulateAttack(m, nearest)
								continue
							}

							// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô AttackRange ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
							if len(m.Path) == 0 {
								m.Path = models.FindPath(m.Pos, m.Target, tileMap)
							}
						}
					} else if len(m.Path) == 0 {
						// ‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô MoveRange
						tx, ty := getRandomWalkableWithinRange(tileMap, m.SpawnPos, template.MoveRange)
						m.Target = models.Vec2{X: tx, Y: ty}
						m.Path = models.FindPath(m.Pos, m.Target, tileMap)
					}

					// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°
					// if nearest != nil {
					// 	m.Target = nearest.Pos
					// 	m.Path = models.FindPath(m.Pos, m.Target, tileMap)
					// } else if len(m.Path) == 0 {
					// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏∏‡πà‡∏°
					tx, ty := getRandomWalkable(tileMap)
					m.Target = models.Vec2{X: tx, Y: ty}
					m.Path = models.FindPath(m.Pos, m.Target, tileMap)
					//}

					const sightRange = 20

					// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ Player ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ monster ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
					hasNearbyPlayer := false
					for _, p := range players {
						if distance(m.Pos, p.Pos) <= sightRange {
							hasNearbyPlayer = true
							break
						}
					}

					// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ path ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏Å‡πâ‡∏≤‡∏ß
					if len(m.Path) > 0 {
						m.MoveStep()
						if hasNearbyPlayer {
							BroadcastMonsterMoveToZone(zoneID, m)
							log.Println("üì° MONSTER_MOVE ‚Üí zone", zoneID, "‚Üí", m.ID, "‚Üí", m.Pos.X, m.Pos.Y)
						}
					}
				}
			}
		}
	}()
}

// ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
func getRandomWalkable(tileMap [][]models.Tile) (int, int) {
	for i := 0; i < 100; i++ {
		x := rand.Intn(256)
		y := rand.Intn(256)
		if tileMap[y][x].Walkable {
			return x, y
		}
	}
	return 100, 100
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Manhattan
func distance(a, b models.Vec2) int {
	dx := a.X - b.X
	dy := a.Y - b.Y
	if dx < 0 {
		dx = -dx
	}
	if dy < 0 {
		dy = -dy
	}
	return dx + dy
}

// ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
func findNearestPlayer(m *models.Monster, players []*Player) *Player {
	template := MonsterTemplates[m.Index]
	if template == nil {
		return nil // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ nil panic
	}

	var nearest *Player
	viewRange := template.ViewRange

	for _, p := range players {
		d := distance(m.Pos, p.Pos)
		if d <= viewRange {
			if nearest == nil || d < distance(m.Pos, nearest.Pos) {
				nearest = p
			}
		}
	}
	return nearest
}

// ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏•‡∏î HP ‚Üí ‡∏™‡πà‡∏á Packet ‚Üí ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏¢‡πÉ‡∏´‡πâ broadcast
func simulateAttack(m *models.Monster, target *Player) {
	if target.CurrentLife <= 0 {
		return
	}

	damage := rand.Intn(50) + 10
	target.CurrentLife -= damage
	if target.CurrentLife < 0 {
		target.CurrentLife = 0
	}

	fmt.Printf("üí¢ Monster %d ‡πÇ‡∏à‡∏°‡∏ï‡∏µ Player %s ‚Üí %d dmg (HP: %d)\n", m.ID, target.Name, damage, target.CurrentLife)

	attackPacket := map[string]any{
		"type": "MONSTER_ATTACK",
		"payload": map[string]any{
			"monsterId": m.ID,
			"targetId":  target.ID,
			"damage":    damage,
			"life":      target.CurrentLife,
		},
	}

	if data, err := json.Marshal(attackPacket); err == nil {
		SafeSend(target, data)
		log.Println("üì° MONSTER_ATTACK ‚Üí", target.Name, "‚Üí", damage, "dmg")
	}

	if target.CurrentLife == 0 {
		broadcastPlayerDeath(target)
	}
}

// ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
func broadcastPlayerDeath(p *Player) {
	deathPacket := map[string]interface{}{
		"type": "PLAYER_DIE",
		"payload": map[string]interface{}{
			"playerId": p.ID,
			"name":     p.Name,
		},
	}

	if data, err := json.Marshal(deathPacket); err == nil {
		BroadcastToZone(p.ZoneID, data)
		log.Println("üì° PLAYER_DIE ‚Üí zone", p.ZoneID, ":", p.Name)
	}
}

// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ MoveRange
func getRandomWalkableWithinRange(tileMap [][]models.Tile, center models.Vec2, moveRange int) (int, int) {
	for i := 0; i < 100; i++ {
		dx := rand.Intn(moveRange*2+1) - moveRange
		dy := rand.Intn(moveRange*2+1) - moveRange
		nx := center.X + dx
		ny := center.Y + dy

		if nx >= 0 && nx < len(tileMap[0]) && ny >= 0 && ny < len(tileMap) {
			if tileMap[ny][nx].Walkable {
				return nx, ny
			}
		}
	}
	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏¢ return spawn ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°
	return center.X, center.Y
}
