package services

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"maxion-zone4/models"
	"maxion-zone4/models/message"
	"time"
)

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Monster ‡πÄ‡∏î‡∏¥‡∏ô, ‡πÑ‡∏•‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô, ‡πÇ‡∏à‡∏°‡∏ï‡∏µ, ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Packet
func StartMonsterAI() {
	ticker := time.NewTicker(500 * time.Millisecond)
	go func() {
		for range ticker.C {
			movedMonsters := make(map[int][]*models.Monster) // zoneID ‚Üí []*Monster

			for zoneID, monsters := range MonsterManager.monsters {
				tileMap := TileMapData[zoneID]
				if tileMap == nil {
					continue
				}

				players := GetPlayersInZone(zoneID)

				for _, m := range monsters {
					if !m.Alive {
						continue
					}

					template := MonsterTemplates[m.Index]
					if template == nil {
						continue
					}

					now := time.Now()

					// üëÅÔ∏è ‡∏´‡∏≤ player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô ViewRange
					nearest := findNearestPlayer(m, players)
					if nearest != nil && distance(m.Pos, nearest.Pos) <= template.ViewRange {
						// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô target ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
						if m.Target != nearest.Pos || len(m.Path) == 0 {
							m.Target = nearest.Pos
							m.Path = nil
						}

						// ‚öîÔ∏è ‡πÅ‡∏¢‡∏Å logic ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
						if distance(m.Pos, nearest.Pos) <= template.AttackRange {
							cooldown := attackSpeedToCooldownMs(template.AttackSpeed)
							if time.Since(m.LastAttackTime) >= cooldown {
								simulateAttack(m, nearest)
								m.LastAttackTime = now

								// ‚ùó ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏µ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
								m.Path = nil
								continue
							}
						}
					}

					// üß≠ ‡∏´‡∏≤ path ‡πÑ‡∏õ‡∏´‡∏≤ target (player ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πâ‡∏≤‡∏™‡∏∏‡πà‡∏°)
					if len(m.Path) == 0 && m.Target != (models.Vec2{}) {
						path := models.FindPath(m.Pos, m.Target, tileMap)
						if len(path) > 1 {
							m.Path = path
						} else {
							m.Path = nil
							m.Target = models.Vec2{}
						}
					}

					// üîÑ fallback ‚Üí ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ path ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
					if len(m.Path) == 0 && m.Target == (models.Vec2{}) {
						if rand.Intn(100) < 10 {
							continue // ‡∏ô‡∏¥‡πà‡∏á‡∏ö‡∏≤‡∏á‡∏£‡∏≠‡∏ö
						}

						tx, ty := getRandomWalkableWithinRange(tileMap, m.SpawnPos, template.MoveRange)
						if tx >= 0 && ty >= 0 {
							newTarget := models.Vec2{X: tx, Y: ty}
							if newTarget != m.Pos {
								m.Target = newTarget
								path := models.FindPath(m.Pos, m.Target, tileMap)
								if len(path) > 1 {
									m.Path = path
								} else {
									m.Path = nil
									m.Target = models.Vec2{}
								}
							}
						}
					}

					// üë£ ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° path
					if len(m.Path) > 0 && now.Sub(m.LastMoveTime) >= m.MoveDelay {
						m.MoveStep(template)
						m.LastMoveTime = now
						movedMonsters[zoneID] = append(movedMonsters[zoneID], m)
					}
				}
			}

			// ‚úÖ ‡∏£‡∏ß‡∏°‡∏™‡πà‡∏á movement ‡∏ï‡πà‡∏≠ zone
			for zoneID, list := range movedMonsters {
				if len(list) > 0 {
					BroadcastMonsterGroupMoveToZone(zoneID, list)
				}
			}
		}
	}()
}

// ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
func getRandomWalkable(tileMap [][]models.Tile) (int, int) {
	for i := 0; i < 100; i++ {
		x := rand.Intn(256)
		y := rand.Intn(256)
		if tileMap[y][x].Walkable {
			return x, y
		}
	}
	return 100, 100
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Manhattan
func distance(a, b models.Vec2) int {
	dx := a.X - b.X
	dy := a.Y - b.Y
	if dx < 0 {
		dx = -dx
	}
	if dy < 0 {
		dy = -dy
	}
	return dx + dy
}

// ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
func findNearestPlayer(m *models.Monster, players []*Player) *Player {
	template := MonsterTemplates[m.Index]
	if template == nil {
		return nil // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ nil panic
	}

	var nearest *Player
	viewRange := template.ViewRange

	for _, p := range players {
		d := distance(m.Pos, p.Pos)
		if d <= viewRange {
			if nearest == nil || d < distance(m.Pos, nearest.Pos) {
				nearest = p
			}
		}
	}
	return nearest
}

// ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏•‡∏î HP ‚Üí ‡∏™‡πà‡∏á Packet ‚Üí ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏¢‡πÉ‡∏´‡πâ broadcast
func simulateAttack(m *models.Monster, target *Player) {
	target.CurrentLife = target.MaxLife

	if target.CurrentLife <= 0 {
		return
	}

	// ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
	damage := rand.Intn(50) + 10
	target.CurrentLife -= damage

	// ‚ùó ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô HP ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
	if target.CurrentLife < 0 {
		target.CurrentLife = 0
	}

	// log ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
	fmt.Printf("üí¢ Monster %d ‡πÇ‡∏à‡∏°‡∏ï‡∏µ Player %s ‚Üí %d dmg (HP: %d)\n", m.ID, target.Name, damage, target.CurrentLife)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
	attackPacket := map[string]any{
		"type": "MONSTER_ATTACK",
		"payload": map[string]any{
			"monsterId": m.ID,
			"targetId":  target.ID,
			"damage":    damage,
			"life":      target.CurrentLife,
		},
	}

	// ‡∏™‡πà‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á player ‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô
	if data, err := json.Marshal(attackPacket); err == nil {
		SendUDP(message.SERVER_MESSAGE_MONSTER_ATTACK, string(data))
		log.Println("üì° MONSTER_ATTACK ‚Üí", target.Name, "‚Üí", damage, "dmg")
	}

	// ‚ùó ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ player ‡∏ï‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤ HP ‡∏´‡∏°‡∏î
	if target.CurrentLife == 0 {
		log.Printf("üíÄ Player %s ‡∏ï‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Monster %d", target.Name, m.ID)
		// broadcastPlayerDeath(target)

		// Optional: Mark ‡∏ß‡πà‡∏≤ player ‡∏ï‡∏≤‡∏¢
		// target.Alive = false
	}
}

// ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
func broadcastPlayerDeath(p *Player) {
	deathPacket := map[string]interface{}{
		"type": "PLAYER_DIE",
		"payload": map[string]interface{}{
			"playerId": p.ID,
			"name":     p.Name,
		},
	}

	if data, err := json.Marshal(deathPacket); err == nil {
		BroadcastToZone(p.ZoneID, data)
		log.Println("üì° PLAYER_DIE ‚Üí zone", p.ZoneID, ":", p.Name)
	}
}

// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ MoveRange
func getRandomWalkableWithinRange(tileMap [][]models.Tile, center models.Vec2, moveRange int) (int, int) {
	for i := 0; i < 100; i++ {
		dx := rand.Intn(moveRange*2+1) - moveRange
		dy := rand.Intn(moveRange*2+1) - moveRange
		nx := center.X + dx
		ny := center.Y + dy

		if ny >= 0 && ny < len(tileMap) && nx >= 0 && nx < len(tileMap[0]) {
			// ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
			if tileMap[ny][nx].Walkable && (nx != center.X || ny != center.Y) {
				return nx, ny
			}
		}
	}
	// fallback ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
	// return center.X, center.Y
	return -1, -1
}

func attackSpeedToCooldownMs(atkSpeed int) time.Duration {
	if atkSpeed <= 0 {
		return 1500 * time.Millisecond // fallback default
	}
	return time.Duration(100000/(15*atkSpeed)) * time.Millisecond
}
